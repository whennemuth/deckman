AWSTemplateFormatVersion: 2010-09-09

Description: >
  Create a EC2 Instance to run the deckman website
  
Parameters:

  EC2InstanceType:
    Type: String
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    Default: t2.medium
    
#  DockerImageRegistry:
#    Type: String
#    Default: wrh1/deckman

  S3BucketName:
    Type: String
    Default: deckman/website  

Resources:

  Utils:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/deckman/cloudformation/ami-lookup.yaml
      Parameters:
        GlobalPrefix:
          ECS-test

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken:
        !GetAtt Utils.Outputs.AMIInfoFunction.Arn
      Region:
        Ref: AWS::Region    

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Description: T2 Instance for running the deckman website

    Properties:
      Tags:
      - Key: Name
        Value: deckman-ec2-website
      ImageId: 
        # ami-00129b193dc81bc31
        !GetAtt AMIInfo.Id
      InstanceType:
        !Ref EC2InstanceType
      SecurityGroups:
      - !Ref MyEC2InstanceSecurityGroup
      KeyName: deckman-rsa-key
      IamInstanceProfile:
        !Ref DeckmanEC2InstanceProfile

  #   USERDATA_VS_CFN-INIT:
  #     UserData is run only once upon creation of the ec2 instance and will call cfn-init for the first time as 
  #     one of its last commands. Instead of being procedural like UserData, cfn-init is state-based in that it 
  #     comprises only commands that deposit/replace files, set environment variables, update packages, etc. But 
  #     the biggest difference is that cfn-init can be run again after the initial ec2 creation either by modifying
  #     anything in the AWS::CloudFormation::Init resource of the cfn stack template and performing a stack update, 
  #     or shelling into the ec2 instance and running:
  # 
  #       /opt/aws/bin/cfn-init \
  #         -v --region ${AWS::Region} \
  #         --stack ${AWS::StackName} \
  #         --resource YourResourceName \
  #         --configsets ...
  #
  #     If you make a modification to UserData cloudformation will REPLACE that EC2 instance during a stack update.
  #     If you make a modification to AWS::CloudFormation::Init, cloudformation will UPDATE that ec2 instance in place 
  #     during a stack update. So, rule of thumb: Don't put anything in UserData that you want to be "refreshable" 
  #     with a stack update
  